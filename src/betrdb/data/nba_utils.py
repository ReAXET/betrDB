"""Module containing utility functions for the NBA data module."""
from datetime import datetime
from typing import Any, Optional, Union, Iterable


def season_id_to_int(season_id: str) -> int:
    """Converts a season_id string to an int. For example, '2019-20' -> 2020."""
    return int(season_id[:4]) + 1


def get_rowset_mapping(result_sets, column_names) -> dict[Any, Any]:
    """Converts the result_sets from the nba_api package to a list of dicts with the column names as keys."""
    headers = result_sets['headers']
    mapped = {}
    for column in column_names:
        column_upper = column.upper()
        if column_upper not in headers:
            mapped[column] = None
        else:
            mapped[column] = headers.index(column.upper())
    return mapped


def get_columns(db_tables, table_name):
    """Gets the columns from a table in the database."""
    for table in db_tables:
        if table.name == table_name:
            return table.columns
    return get_columns(db_tables, table_name)


def column_names_from_table(db_tables, table_name):  # type: ignore
    """Gets the column names from a table in the database."""
    columns = db_tables.get_columns(table_name)
    mapped = [column.name for column in columns]

    # Season id is a construct for the betrdb, and not required for the nba_api package.
    if 'season_id' in mapped:
        mapped.remove('season_id')

    # Ignore autogenerated columns.
    if 'id' in mapped:
        mapped.remove('id')

    return mapped


def chunk_list(in_list, chunk_size_n) -> list[Any]:
    """Yield successive n-sized chunks from l."""
    return [in_list[i:i + chunk_size_n] for i in range(0, len(in_list), chunk_size_n)]


def progress_bar(itertable, prefix='', suffix='', decimals=1, length=100, fill='â–ˆ', print_end="\r", quiet=False):
    """Call in a loop to create terminal progress bar."""
    if isinstance(itertable, list) or isinstance(itertable, Iterable):
        total = len(itertable)  # type: ignore
    elif isinstance(itertable, int):
        total = itertable
    else:
        total = len(list(itertable))

    def print_progress_bar(iteration):
        """Print iterations progress."""
        percent = (
            "{0:." + str(decimals) + "f}"
        ).format(100 * (iteration / float(total)))
        filled_length = int(length * iteration // total)
        bar = fill * filled_length + '-' * (length - filled_length)
        if not quiet:
            print(f'\r{prefix} |{bar}| {percent}% {suffix}', end=print_end)
        # Print New Line on Complete
        # Initial call prints empty bar
        print_progress_bar(0)
        # Update Progress Bar
        for i, item in enumerate(itertable):  # type: ignore
            yield item
            print_progress_bar(i + 1)

        if not quiet:
            print()

    return print_progress_bar


def generate_valid_seasons():
    """Generates the valid seasons for the NBA data, starting from 1996-97 to the current season,
    which assumes the season begins in October."""
    valid_seasons = []
    current_year = datetime.now().year
    for year in range(1996, current_year):
        valid_seasons.append(f'{year}-{str(year + 1)[2:]}')
    return valid_seasons
